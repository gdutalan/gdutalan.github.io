[{"title":"工厂模式","date":"2017-06-01T06:07:25.000Z","path":"2017/06/01/工厂模式/","text":"一、引子话说十年前，有一个爆发户，他家有三辆汽车（Benz（奔驰）、Bmw（宝马）、Audi（奥迪）看来这人比较爱国，没有日本车），还雇了司机为他开车。不过，爆发户坐车时总是这样：上Benz车后跟司机说”开奔驰车！”，坐上Bmw后他说”开宝马车！”，坐上Audi后他说”开奥迪车！”。你一定说：这人有病！直接说开车不就行了？！ 而当把这个爆发户的行为放到我们程序语言中来，我们发现C语言一直是通过这种方式来坐车的！幸运的是，这种有病的现象在OO语言中可以避免了。下面以Java语言为基础来引入我们本文的主题：工厂模式！！二、简介工厂模式主要是为创建对象提供了接口。工厂模式按照《Java与模式》中的提法分为三类： 简单工厂模式(Simple Factory) 工厂方法模式(Factory Method) 抽象工厂模式(Abstract Factory)这三种模式从上到下逐步抽象，并且更具一般性。还有一种分类法，就是将简单工厂模式看为工厂方法模式的一种特例，两个归为一类。下面是使用工厂模式的两种情况：1.在编码时不能预见需要创建哪种类的实例。2.系统不应依赖于产品类实例如何被创建、组合和表达的细节 三、简单工厂模式顾名思义，这个模式本身很简单，而且使用在业务较简单的情况下。它由三种角色组成（关系见下面的类图）：1、工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑。在java中它往往由一个具体类实现。2、抽象产品角色：它一般是具体产品继承的父类或者实现的接口。在java中由接口或者抽象类来实现。3、具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现。 那么简单工厂模式怎么用呢？我来举个例子吧，我想这个比讲一大段理论上的文字描述要容易理解的多！下面就来给那个暴发户治病: P在使用了简单工厂模式后，现在暴发户只需要坐在车里对司机说句：”开车”就可以了。来看看怎么实现的：//抽象产品角色public interface Car{public void drive();} //具体产品角色public class Benz implements Car{public void drive() {System.out.println(“Driving Benz “);}} public class Bmw implements Car{public void drive() {System.out.println(“Driving Bmw “);}}。。。（奥迪我就不写了:P） //工厂类角色public class Driver{ //工厂方法//注意 返回类型为抽象产品角色public static Car driverCar(String s)throws Exception { //判断逻辑，返回具体的产品角色给Clientif(s.equalsIgnoreCase(“Benz”)) return new Benz();else if(s.equalsIgnoreCase(“Bmw”))return new Bmw(); ……else throw new Exception();。。。// 欢迎暴发户出场……public class Magnate{public static void main(String[] args){try{//告诉司机我今天坐奔驰Car car = Driver.driverCar(“benz”);//下命令：开车car.drive();。。。如果将所有的类放在一个文件中，请不要忘记只能有一个类被声明为public。 程序中类之间的关系如下： 这便是简单工厂模式了。下面是其好处：首先，使用了简单工厂模式后，我们的程序不在”有病”，更加符合现实中的情况；而且客户端免除了直接创建产品对象的责任，而仅仅负责”消费”产品（正如暴发户所为）。下面我们从开闭原则上来分析下简单工厂模式。当暴发户增加了一辆车的时候，只要符合抽象产品制定的合同，那么只要通知工厂类知道就可以被客户使用了。那么对于产品部分来说，它是符合开闭原则的–对扩展开放、对修改关闭；但是工厂部分好像不太理想，因为每增加一辆车，都要在工厂类中增加相应的商业逻辑和判断逻辑，这显自然是违背开闭原则的。对于这样的工厂类（在我们的例子中是为司机师傅），我们称它为全能类或者上帝类。我们举的例子是最简单的情况，而在实际应用中，很可能产品是一个多层次的树状结构。由于简单工厂模式中只有一个工厂类来对应这些产品，所以这可能会把我们的上帝类坏了，进而累坏了我们可爱的程序员:(正如我前面提到的简单工厂模式适用于业务将简单的情况下。而对于复杂的业务环境可能不太适应阿。这就应该由工厂方法模式来出场了！！ 四、工厂方法模式先来看下它的组成吧：1、抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。2、具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。在java中它由具体的类来实现。3、抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。4、具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。来用类图来清晰的表示下的它们之间的关系： 我们还是老规矩使用一个完整的例子来看看工厂模式各个角色之间是如何来协调的。话说暴发户生意越做越大，自己的爱车也越来越多。这可苦了那位司机师傅了，什么车它都要记得，维护，都要经过他来使用！于是暴发户同情他说：看你跟我这么多年的份上，以后你不用这么辛苦了，我给你分配几个人手，你只管管好他们就行了！于是，工厂方法模式的管理出现了。代码如下：//抽象产品角色，具体产品角色与简单工厂模式类似，只是变得复杂了些，这里略。//抽象工厂角色public interface Driver{public Car driverCar();}public class BenzDriver implements Driver{public Car driverCar(){return new Benz();}}public class BmwDriver implements Driver{public Car driverCar() {return new Bmw();}}……//应该和具体产品形成对应关系，这里略…//有请暴发户先生public class Magnate{public static void main(String[] args){try{Driver driver = new BenzDriver(); Car car = driver.driverCar();car.drive();}catch(Exception e){ }}}工厂方法使用一个抽象工厂角色作为核心来代替在简单工厂模式中使用具体类作为核心。让我们来看看工厂方法模式给我们带来了什么？使用开闭原则来分析下工厂方法模式。当有新的产品（即暴发户的汽车）产生时，只要按照抽象产品角色、抽象工厂角色提供的合同来生成，那么就可以被客户使用，而不必去修改任何已有的代码。看来，工厂方法模式是完全符合开闭原则的！使用工厂方法模式足以应付我们可能遇到的大部分业务需求。但是当产品种类非常多时，就会出现大量的与之对应的工厂类，这不应该是我们所希望的。所以我建议在这种情况下使用简单工厂模式与工厂方法模式相结合的方式来减少工厂类：即对于产品树上类似的种类（一般是树的叶子中互为兄弟的）使用简单工厂模式来实现。当然特殊的情况，就要特殊对待了：对于系统中存在不同的产品树，而且产品树上存在产品族，那么这种情况下就可能可以使用抽象工厂模式了。 五、小结让我们来看看简单工厂模式、工厂方法模式给我们的启迪：如果不使用工厂模式来实现我们的例子，也许代码会减少很多–只需要实现已有的车，不使用多态。但是在可维护性上，可扩展性上是非常差的（你可以想象一下，添加一辆车后要牵动的类）。因此为了提高扩展性和维护性，多写些代码是值得的。 六、抽象工厂模式先来认识下什么是产品族：位于不同产品等级结构中，功能相关联的产品组成的家族。如果光看这句话就能清楚的理解这个概念，我不得不佩服你啊。还是让我们用一个例子来形象地说明一下吧。 图中的BmwCar和BenzCar就是两个产品树（产品层次结构）；而如图所示的BenzSportsCar和BmwSportsCar就是一个产品族。他们都可以放到跑车家族中，因此功能有所关联。同理BmwBussinessCar和BenzSportsCar也是一个产品族。回到抽象产品模式的话题上，可以这么说，它和工厂方法模式的区别就在于需要创建对象的复杂程度上。而且抽象工厂模式是三个里面最为抽象、最具一般性的。抽象工厂模式的用意为：给客户端提供一个接口，可以创建多个产品族中的产品对象。而且使用抽象工厂模式还要满足一下条件：1.系统中有多个产品族，而系统一次只可能消费其中一族产品2.同属于同一个产品族的产品以其使用。来看看抽象工厂模式的各个角色（和工厂方法的如出一辙）：抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。在java中它由具体的类来实现。抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。 看过了前两个模式，对这个模式各个角色之间的协调情况应该心里有个数了，我就不举具体的例子了。只是一定要注意满足使用抽象工厂模式的条件哦，不然即使存在了多个产品树，也存在产品族，但是不能使用的。","tags":[{"name":"java设计模式","slug":"java设计模式","permalink":"http://gdutalan.github.io/tags/java设计模式/"}]},{"title":"做回自己，痛苦与快乐并存","date":"2017-03-13T04:04:20.000Z","path":"2017/03/13/做回自己，痛苦与快乐并存/","text":"","tags":[]},{"title":"hexo主题","date":"2017-03-11T07:54:18.000Z","path":"2017/03/11/hexo主题/","text":"#hello world Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 Red Green Blue","tags":[{"name":"随笔","slug":"随笔","permalink":"http://gdutalan.github.io/tags/随笔/"}]},{"title":"hexo主题2","date":"2017-03-11T07:54:18.000Z","path":"2017/03/11/java/hexo主题2/","text":"java","tags":[{"name":"java","slug":"java","permalink":"http://gdutalan.github.io/tags/java/"}]},{"title":"Hello World","date":"2017-03-11T06:34:06.863Z","path":"2017/03/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"20121215周记","date":"2012-12-15T04:04:20.000Z","path":"2012/12/15/20121215/","text":"五饭该不该存在？这个问题引起在飘香一群人讨论，是非对错，存在与否，也不是一个人，几个人能决定的。抱负不错，可惜现实残酷，这就是我的体会。 今天在新浪看了一个新闻，关于迅雷的CEO邹胜龙的，题目是《迅雷CEO邹胜龙自述：迅雷十年反思》，这值得我去深思，是技术重要，还是推广，包装重要？迅雷的成功，邹先生总结为，六个字，勤奋，正直，中庸。中庸这一词，感觉挺特别的，感觉有点像自己，平常的，指中才，中人。感觉邹先生是一个低调的人。 这个星期的收获，PLC实验，用了比较笨的方法去做霓虹灯，打代码还忘记保存，按了上载，结果自己的程序不见了，又要重新打过，哎，结果实验4都没做。。。。。但自我感觉还不错。 马刺两连败，哎，居然被小莫绝杀。。。。。 岁月不饶人，GDP的马刺。。。网上选毕业设计，选了刘洪涛老师的《网络书店》，发了个邮件，说按自己的想法去做，可惜我也没做过，这也是个挑战，希望能好好完成吧。这周大概就是这样吧。呵呵！等一下打打球，放松一下先。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://gdutalan.github.io/tags/随笔/"}]},{"title":"20121206日记","date":"2012-12-06T04:04:20.000Z","path":"2012/12/06/20121206/","text":"今天终于出太阳了，感觉整个人阳光了许多，之前面试失败造成的失落情绪几乎消除了。今天上飘香有人这样说，其實真的不用急！！！真的真的真的不用急！！！時間還有很多！！！！不要盲目的就找工作！！！！大學真的還有很長！！！！想想還有什麽事是要做的！！！！大四找工作如果就是你的全部，那麼你就真的渣渣的！！！！哥大四現在都還沒寫簡歷呢！！！！！所以假如你已經寫好了簡歷，那麼你已經做很多了！！！！！！完全不需要急！！！！其实说得也挺对的，记得前一天班主任在q群里是这样说的，现在大家找工作，只是明天有没有饭吃。练好内功，关系几十年有没有饭吃。所以要淡定。 今天想到了一个游戏，也许是想起高中时和志明，还有lb，玩游戏王牌时的情景，接着看了一下游戏王online，居然还是没有在中国发行，唉，但游戏王的动画也到尽头了，最新的主人公感觉是在侮辱高桥。对这个游戏是在晚上睡觉时想的，将三国杀加游戏王加三国志加千军破的游戏。真的是大杂烩了。。。呵呵！今天就写到这里！天天写太多也不会好，还是赶紧去补补专业知识先。 人生不能靠心情活着，而要靠心态去生活。年轻的好处，就是可以在没有看清楚这个世界之前，做率性的事。 荒唐也好，可笑也好，那是无悔的青春。成功的时候不要忘记过去; 失败的时候不要忘记还有未来。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://gdutalan.github.io/tags/随笔/"}]},{"title":"我的面试经历","date":"2012-12-04T04:04:20.000Z","path":"2012/12/04/20121204/","text":"4399面试游戏测试师面试官：liwei&nbsp;&nbsp;很兴奋得到这次面试的机会，可以说这次是我第二次的面试机会，也不知道是因为自身的原因或者其他方面原因，也许是人品不行，投的简历都石沉大海。虽说有过第一次面试的经历，但那一次我一开始是没有去认真对待。故事是这样开始的，一天早上我刚睡醒，就来了一个电话，就问我会不会搞网站开发和网站的后台管理，会不会写小程序。我对网站开发那些都不熟悉，只是会写一些代码，或者说复制人家的代码吧。我就对他这样得回答,我只会写一些代码，和小程序。他说好，明天到珠海来面试。不知什么原因驱动我，我居然会答应了，居然会从广州到珠海那里。我是一个比较内向的人，简单来说就是宅男一个，整天就对着电脑。珠海我一次都没去过。虽说很近，因为我是中山的。那一天就从广州，坐着那高校联谊那部车（35块吧）去了珠海的拱北。 去到那里才知道是一间小公司（后来了解，公司就10个人），有两个单位（8楼一个单位和10楼一个单位构成），公司就在花园大厦里，简陋得狠，接着一个人问我是面试的吗？是面试就跟我来，一来就到了10楼，走楼梯的时候，那灯不知道多久没修，虽说是感应的灯，但一闪一闪，或者突然灭了，真是不知用什么来表达。接着房间坐着就两个人，一个是中年男人（40-50岁），也许是高层或部门经理吧，一位是类似我一样的学生，感觉年轻多了。后来那个带我上来的人就跟那个中年说一些公司的问题，我就这样坐着。后来细节不是太清楚，那年轻的，原来是07年从华农毕业的，学的是行政管理。个人感觉那人很不错，因为我比较内向，不善于交流，但也许都是在广州的大学读过，感觉没有隔阂，他问了一些简单的问题，看了一下我的简历，很惊讶说原来是广工的，但他对广工不是太了解，只知道龙洞有一个广工，但也是，大学城广工也就几年前才建的。接着那个中年人就和我聊一下，通过交谈，原来他们是一间代购公司，说得简单一点，就是帮人家网上购物，具体情况就不详述了。原来中年人就是这件公司的老总，他们的员工都叫他大哥。我就一开始叫他陈先生。后来他说了一次面试我的原因，以前有一个人帮他们公司做了一个网站，这个人几个月前就走了，后来公司需要扩展业务，需要修改一下网站，所以就问我这网站能按照他的方案来修改吗，我就说我只是学生，也许不能很好的完成，因为没有开发网站的经验，我尽量试一下。那一下午我就看了一下那公司网站的代码，了解到网站是php+mysql开发的，是按照网上一个开源项目ECSHOP来修改的。可以说我没任何经验。那一次看代码后，我跟陈先生说我回去研究一下。那天晚上就回去了广州。后来事情又可以说一个故事了，这就是我第一次面试的经历。 &nbsp;&nbsp;总结一下我第二次的面试，当我发简历后，想不到这么快就收到了回复。这次真的太意外了。所以一时间没准备好，就上场了。不知道看我简历的是哪一个人。有没有看到我写得那一番话。接到面试的通知，开始是兴奋，后来不知要做些什么准备，差点就没睡着了。到面试的那一个下午。坐着专线2到科韵路站下车，一看就看到信息港几个字，找了一下，找到了4399那个自动门。进来4399的一楼，感觉给我一种很舒适的环境，不知道是因为简单的设计，还是其他原因，没有那种炫耀的感觉。虽说没有艺术细胞的我都感觉不错。先问了前台的服务姐姐，接着叫我填一下职业申请表。填完以后，就坐着等。等时候，看到一个隔壁班的同学，原来也是来面试的。但他不知道有培训班这回事，他也是面试测试的。聊了一下。后来就到我面试了，面试过程一团糟，不知因为是紧张还是兴奋，自己说得很乱，完全没有节奏。慢慢的不知道就结束了。脑子一片空白。出门后，就知道失败了。回来不断的重复那面试的情景，想了很多。首先自我介绍说的不好，虽说准备了一下，也许简历上都说了，可惜我表达不够好，几乎是一次失败的自我介绍。不知道是不是呆在虚拟世界多了，发现自己和陌生人交流有障碍了，因为习惯了打字聊天和发图片表感情，或者是因为重视这次面试的机会，兴奋到紧张。 &nbsp;&nbsp;针对李先生问的几个问题。可以说我想不到会是这样的问题的。也许我想过很多个剧本，但这次的剧本真的没想过是这样的。我谈到游戏，也忘记我说过什么，只是你问起我，说千军破吸引我的地方，我回答是三国的背景，武将，攻池夺地，其实游戏吸引人又很多原因，每一个人的感觉都不一样。毕竟千军破那个游戏我很久前都没有玩了，那个qq群虽说还在，但已经是空群，没有生气。认识的几个游戏的好友，工作得工作，毕业得毕业，玩其他游戏的玩其他游戏。也很少交流了。接触千军破是一个暑假时，那时和各路玩家组成了一个势力，势力好像是陶谦（桃子）。那时就是一个新手，什么都不会。一位老玩家就说，那你就造一下兵，练一下武将。打仗时候，叫你一起去吧。那时虽说有教程入门，但很多得东西都要探索，问线上的人，自己找攻略，什么兵种克什么兵种，造兵时间，后来熟悉势力的规则，就像法令一样。要遵守什么，不能做什么。一个势力分等级的，丞相（权力最大），下面有兵部尚书，工部尚书，礼部尚书，还有个省的官吏。考虑到权力制衡，还配了两个左右使，制衡丞相。当然还有向我这样的平民，打酱油的。各势力有敌对的，同盟，等外交关系。就是说像真实的世界，或者是古代的制度。说了这么多，也许有点罗嗦了（后面就省略1万字吧）。前面只是说我对一个游戏的体会，其实玩过的游戏我真的一时想不起来。其实游戏的定义是什么。我都不能说明白。我只会天真地想到：游戏带给人快乐。但现实真的不一样，许多人会沉迷游戏中，不能自拔，这是很杯具的事情。也许我曾经也试过。到底是人玩游戏，还是游戏玩人。所以我定义游戏就是两个方面，游戏的对象是人，怎样给人带来快乐。虽说很泛，但我觉得很重要。记得你问我大学的收获是什么？这个问题我答是：怎样思考问题。那时我真的在思考我大学的收获，在回忆大学种种走过的路。所以随口说了一个老师对我们说的话，大学我们应该学会怎样去思考问题。如果说大学的收获，可以写一大段故事了，朋友，社团，老师，同学，学校，学习，等等。个人感觉大学的生活还不错，虽说自己也许不懂事，不懂得自律，有时太放松，有遗憾，有快乐，有悲伤，有不满，喜怒哀乐。如果有重来一遍的大学生活，也许自己有另外的过法。但毕竟时间是在流逝，不可能回到过去，不可能穿越。所以大学的收获，我真的一时回答不出来。但我可以肯定是我的大学生活是很丰富多彩的，至少我还挺满意的。数据结构有这么方面的了解？也许我的专业知识不够扎实，也许是数据结构这个词太广了，因为有一本书和我学的课程叫数据结构。但数据库里也有数据结构这个词，不知游戏测试师指那一方面的。数据结构，如果我还记得一点，更多的讲的是算法。栈，队列，节点，字符串，或者是遍历，或者是排序等。如果是数据库，就是数据项，数据流图，ER图，等的概念。我学习真的不太好。如果能具体点就好，或者直接举个例子给我看一下。 &nbsp;&nbsp;总结一下面试，我个人不足，语言表达不行，问到专业问题，有点想躲避，或者不能回答完整。面试时过度紧张，有点怯场。其实吸引我的不是游戏测试那一个岗位的薪资，也许很多人找工作都是看重公司的待遇和名气。但我自己却不认同，现在的我们还年轻，况且我还没有毕业呢，缺乏的是社会实践经验，金钱也许可以做很多东西，但我感觉现在的我还不需要，希望通过几年的社会的洗礼，弥补自己的不足之处。也许现在的我比不上很多人，或者说能力差人家好远。但未来是未知的，谁能预测呢。有一天，你们说举行一次游戏测试培训，吸引我的是最原汁原味的游戏测试工程师的生活，其他同学可获得职业生涯辅导和就业机会推荐。或者说我就当一次学习的机会和课程。了解做为一个游戏测试师需要的条件和专业知识，课程完后就回去自己重新学习一下，或者对针对自己不足做一些调整，如果真的不合适这个行业，那就选择其他的方向。游戏测试师应该是整个游戏开发过程中的审查者。或者是第一体验者。因为后面游戏完成后公测或封测，玩家是第二体验者。游戏测试师是必不少的，不可缺，因为开发者是不能去测试自己的游戏。游戏测试师是学东西的职位。可以了解整一个游戏开发过程。其实话还有很多想说，但也没必要了。最后再次感谢4399给我这一次面试的机会。也许自身原因和不足不能满足公司需求。记得面试结束前你说还有什么问题想问？其实真的很多问题，但不知为什么说不出来。现在回到宿舍。一个静静地想，发现好多了。以下是我问的问题1.4399的理念是“将简单做到极致”，我想知道李先生是怎样理解的，或者公司是怎样说明的。2.一个出色的游戏测试师应该具备什么条件。3.你在4399工作了几年，那你在4399的收获是什么？4.4399名字怎样来的？（因为简单，容易记？还是有其他故事？）5.李兴平先生将自己的hao123卖给百度，这件事，你有什么看法？6.我这个人是不是很烦或罗嗦？评价一下我这一个人7.面试了这么多人，感觉这些人缺乏什么？8.你认为hao123成功的原因有哪些？&nbsp;&nbsp;暂时想不到，就是这么多了 &nbsp;&nbsp;给4399提的建议（很天真，也许很肤浅）1.网页游戏现在的那个模式，或者那个模板。我很不喜欢。如果说路线提示，或者说寻路那个真的不好。不知道是不是我玩得是单机版多了，攻略应该是自己探索出来的，或者有攻略书，指引，如果就是这样打，就像木偶一样，想都不想就按照路线打，这样不是太无聊了。还有如果剧情不和整个游戏结合，我只是想说没有会看那是写什么的。没有人关心剧情。只是去杀杀怪，升升级。2.游戏背景或者说题材很重要，中国传统文化博大精深，为什么不好好用。为什么四大名著是西游记，水浒传，红楼梦，三国演义。这些作品都是经典。如果有人写那作品能有这样，只是因为中国的特色，创作人急于求成，想一想伟大的作品要多久才行完成。作品多，但不精。互相抄袭，没有特色。也许有时候喜欢经典，有时流行科幻，有时流行穿越，有时流行外国文化。。。。。3.每一个游戏都有自己的生命周期，也许很短，也许很长。这么多的游戏兴起，又有这么多游戏陨落，存在只有少数，少数的中极少的经典。其中原因，我也不知道。游戏有玩家的离去，也有新玩家的加入，其实最重要的是新玩家的加入，如果游戏很好玩，我玩过，我会介绍给朋友玩，或者一起玩。如果说要留住离去的玩家，根本不可能做到，因为大多数都是喜新厌旧，反正每天吃一味菜，都厌啊。所以我们更关心的是新玩家的加入，和在玩的玩家。也许离去的玩家，过了几年，有一天想起想重回一下游戏，希望那游戏还在吧，因为游戏停服的事情太多了。4.游戏的灵魂是什么？如果游戏只是模仿人家的游戏，只是空壳。那种游戏不会长存。为什么俄罗斯方块这么经久不衰，为什么扑克牌一直这么流行。 &nbsp;&nbsp;游戏如果存在灵魂，即便消亡，它的精神还在，可以延伸很多产品。如果单单做游戏，没有考虑游戏的价值，那游戏是只是单一。游戏价值能创造许多东西，比如三国杀游戏，三国杀的纸牌就是游戏延伸出来的价值。甚至好的游戏可以拍成电影，电视剧。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://gdutalan.github.io/tags/随笔/"}]},{"title":"我想说的话","date":"2012-12-03T04:04:20.000Z","path":"2012/12/03/20121203/","text":"我想说的话： “ 任何事情都应该去尝试一下，因为你无法知道，什么样的事或者什么样的人将会改变你的一生。 ” 找了这么久的工作，发现社会和学校真的很不一样，或者说根本是不同的世界。所以现在什么是适合我的，我暂时还不清楚。只是想试一试，如果失败了，也没所谓，这也可以当作一次很好的的锻炼和增长自己的见识。 我对游戏的理解 ：玩游戏应该是放松自己，卸下所谓的学习压力和工作压力的一种方式。游戏开发者应该是本着以人为本的理念来开发游戏，毕竟玩游戏的毕竟是人，而不是计算机。 “什么是联想？什么是举一反三？什么叫逻辑？”这是我前几个星期在一个小公司工作时，一位老总问我的几个问题。我想了很久，起初我也以为是普通的问题，但我发现在这几年的大学生活（或者从高中开始）远离了这些很久。以前就是老师布置课程设计或实验，按时完成和按步骤完成就可以了，只是当做一次任务而已。其实错了，因为不知什么时候开始，我们不懂得去思考问题，提出自己的见解。无论是上课和实验，我们认为去学习课本的知识就可以了，其实是不够的，再强的理论，不去实践就没有意义，上课不只是为了期末考 了高分或者及格（不挂科）。 还有那个老总说我工作不够严谨 。严谨，说得简单，却做起来就很难。比如写报告，没有规范去写，比如专业用语，格式等。写出的报告就只有自己看得懂，这是很失败的。因为项目不紧紧是你一个人在做，还有你的团队，客户等。看回以前自己做的课程设计和报告，真得很垃圾，很不行。也许当我发现时，已经迟了，但亡羊补牢尚未晚。 为什么选择这一个测试培训。主要原因就是简单的两个字，兴趣 。因为兴趣可以打游戏到通宵，因为兴趣可以看小说一整天，因为兴趣可以打篮球一整天。 我缺乏的是实践经验，因为没去做过大的项目，也没有出去过社会工作。现在，理论知识还不够扎实，也许知道意思，但运用很少，还有容易忘记（现在在补）。还 有对于游戏测试，我基本没有接触过。也许我不是一位出色的学生，但我相信勤能补拙。 （这只是我这几天的体会，文笔不好，欢迎对其评价和指教，分享经验。）","tags":[{"name":"随笔","slug":"随笔","permalink":"http://gdutalan.github.io/tags/随笔/"}]}]